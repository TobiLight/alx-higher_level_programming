# 0-add_integer.txt
# Author: Oluwatobiloba Light

==================================
How to use 0-add_integer.py module
==================================

This module defines a function to add integers ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of it's two arguments. For numbers,
that value is equivalent to using the ``+`` operator.
First import ``add_integer`` from the ``0-add_integer`` module:

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 4)
    8

The function also works with floating-point values. Floats are casted to ints
before addition is performed as well.

::

    >>> add_integer(4.0, 4.0)
    8

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -10)
    -8

The second argument is optional - by default, it is 98.

::

    >>> add_integer(2)
    100

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hola", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", None)
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

Also with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
